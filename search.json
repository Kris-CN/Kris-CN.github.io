[{"title":"Next 7.0+ 球型标签云","url":"/posts/2565730293/","content":"&emsp;&emsp;使用`tagcanvas.js`插件对样式进行修改实现球型标签云，修改步骤如下\n####  1.下载插件  \n&emsp;&emsp;<a href=\"https://www.goat1000.com/tagcanvas.php#links\">点击这里</a>查看并下载插件，下载时右键下载链接，选择从链接另存文件为，保存`tagcanvas.js`文件，如下图所示：  \n<div style=\"width:50%;margin:auto\">{% asset_img 1.png %}</div>  \n&emsp;&emsp;将该插件下载后，放入 `hexo/themes/hexo-theme-next/source/js` 目录下。 \n\n###  2.新建标签云swig文件  \n\n&emsp;&emsp;在`/hexo/themes/hexo-theme-next/layout/_partials`目录下新建一个`tagcanvas.swig`的文件，并添加如下代码：  \n```JavaScript  \n<div class=\"tags\" id=\"myTags\">\n  <canvas width=\"500\" height=\"500\" id=\"my3DTags\">\n    <p>Anything in here will be replaced on browsers that support the canvas element</p>\n  </canvas>\n</div>\n<div class=\"tags\" id=\"tags\">\n  <ul style=\"display: none\">\n    {{ tagcloud({\n        min_font   : theme.tagcloud.min,\n        max_font   : theme.tagcloud.max,\n        amount     : theme.tagcloud.amount,\n        color      : true,\n        start_color: theme.tagcloud.start,\n        end_color  : theme.tagcloud.end})\n    }}\n  </ul>\n</div>\n<script type=\"text/javascript\" src=\"/js/tagcanvas.js\"></script>\n<script type=\"text/javascript\" >\n  window.onload = function() {\n    try {\n      TagCanvas.Start('my3DTags','tags',{\n        textFont: 'Georgia,Optima',\n        textColour: null,\n        outlineColour: 'black',\n        weight: true,\n        reverse: true,\n        depth: 0.8,\n        maxSpeed: 0.05,\n        bgRadius: 1,\n        freezeDecel: true\n      });\n    } catch(e) {\n      document.getElementById('myTags').style.display = 'none';\n    }\n  };\n</script>\n```\n\n\n###  3.修改page.swig  \n\n&emsp;&emsp;对 `themes/hexo-theme-next/layout/` 中的` page.swig` 文件进行修改,删除下图中标注位置的代码：  \n<div style=\"width:50%;margin:auto\">{% asset_img 2.png %}</div>  \n&emsp;&emsp;在被删除位置添加以下代码:  \n```  \n{# tagcanvas plugin 球型云标签 #}\n{% include '_partials/tagcanvas.swig' %}\n```\n\n###  4.修改_config.yml文件  \n\n&emsp;&emsp;打开主题下的配置文件，修改`tagcloud`字段，根据实际需求进行修改。  \n\n```  \n# 标签云设置页面\ntagcloud:\n    min: 12 # 最小字体尺寸，以px为单位\n    max: 30 # 最大字体尺寸，以px为单位\n    start: \"#ccc\" # 开始颜色 (hex, rgba, hsla or color keywords)\n    end: \"#111\" # 结束颜色 (hex, rgba, hsla or color keywords)\n    amount: 200 # 标签数量，当大于200个后，请进行更改  \n```\n\n###  效果图（目前标签较少，多了就好看了）    \n\n<div style=\"width:50%;margin:auto\">{% asset_img 3.png %}</div>  \n###  参考  \n&emsp;&emsp;参考段大佬的文章，<a href=\"https://alex-mcavoy.github.io/hexo/7be258c0.html\">点击这里访问大佬文章</a>","tags":["Hexo","Daily"],"categories":["Hexo"]},{"title":"智能合约与solidity","url":"/posts/3709194251/","content":"## 以太坊\n  &emsp;&emsp;以太坊（英语：Ethereum）是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太坊”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。 以太坊的概念首次在2013至2014年间由程序员维塔利克·布特林受比特币启发后提出，大意为“下一代加密货币与去中心化应用平台”，在2014年透过ICO众筹得以开始发展。 截至2018年6月，以太币是市值第二高的加密货币，以太坊亦被称为“第二代的区块链平台”，仅次于比特币。  \n<!--more-->\n## 智能合约\n  &emsp;&emsp;智能合约（英语：Smart contract）是一种特殊协议，在区块链内制定合约时使用，当中内含了代码函数 (Function)，亦能与其他合约进行交互、做决策、存储资料及发送以太币等功能。智能合约主力提供验证及运行合约内所订立的条件。智能合约允许在没有第三方的情况下进行可信交易。这些交易可追踪且不可逆转。智能合约概念于1994年由一名身兼计算机科学家及密码学专家的学者尼克·萨博首次提出。智能合同的目的是提供优于传统合同方法的安全，并减少与合同相关的其他交易成本。\n## solidity\n  &emsp;&emsp;Solidity是一种合约导向式语言，被应用于各种不同的区块链平台，其主要开发者为加文·伍德，Christian Reitwiessner，Alex Beregszaszi，Liana Husikyan，Yoichi Hirai和其他几位早期以太坊核心贡献者。Solidity 可使程序开发人员能在区块链上（例如以太坊）编写智能合约。\n### 历史\n  &emsp;&emsp;Solidity的语法概念最早是由加文·伍德在2014年提出，后期则以Christian Reitwiessner所领导的以太坊团队Solidity接手开发。该语言是针对以太坊虚拟机（EVM）所设计的四种语言之一（其他的还有Serpent，LLL，Viper（实验中）和Mutan（已弃用））。有关这些语言的更多信息，请参阅以太坊编程语言。 Solidity是目前在以太坊及其他以太坊竞争平台中的主要编程语言，例如Monax及其BurrowHyperledger的区块链就是使用Tendermint完成共识机制。 SWIFT亦已经使用Solidity在Burrow上完成了概念验证。 康奈尔大学的研究人员指出，Solidity即是导致DAO在2016年被黑客攻击的部分原因之一。他表示：“这实际上并不是DAO合同本身的缺陷或漏洞；技术上来说，DAO确实是在EVM上如预期般地被运行，反而是Solidity将安全上的漏洞引入了合约之中，而这些漏洞不仅没被开发社区察觉，Solidity语言的设计者们也忽略了。\n### 描述\n &emsp;&emsp;Solidity是一种静态类型的编程语言，用于开发在EVM上运行的智能合约。 Solidity被编译为可在EVM上运行的字节码。借由Solidity，开发人员能够编写出可自我运行其欲实现之商业逻辑的应用程序，该程序可被视为一份具权威性且永不可悔改的交易合约。对已具备程序编辑能力的人而言，编写Solidity的难易度就如同编写一般的编程语言。 Gavin Wood最初在规划Solidity语言时引用了ECMAScript的语法概念，使其对现有的Web开发者更容易入门；与ECMAScript不同的地方在于Solidity具有静态类型和0可变返回类型。而与目前其他EVM目标语言（如Serpent和Mutan）相比，其重要的差异在于Solidity具有一组复杂的成员变量使得合约可支持任意层次结构的映射和结构。Solidity也支持继承，包含C3线性化多重继承。 另外还引入了一个应用程序二进制接口（ABI），该接口（ABI）可在单一合同中实现多种类型安全的功能。     \n&emsp;&emsp;以下为使用Solidity编写的程序示例：  \n```solidity\npragma solidity ^0.4.0;\ncontract Helloworld{\n    string  myName= \"Helloworld\";\n    function getName()  public view returns(string){\n        return myName;\n    }\n    function changeName(string _newName) public{\n        myName= _newName;\n    } \n    function pureTest(string _name) pure public returns(string) {\n        return _name;\n    }\n}\n\n```  \n&emsp;&emsp;上述主要摘自维基百科，旨在初步了解智能合约的同学有一个初步的认识。","tags":["Solidity"],"categories":["Solidity"]},{"title":"hexotest2","url":"/posts/1778761803/","content":"<!--more-->\n![](/imags/solidity/1.jpg)\n<div style=\"width:40%;margin:auto\">{% asset_img 1.jpg %}</div>"},{"title":"你好呀~我的朋友","url":"/posts/3073087414/","content":"\n\n<h1 align=\"center\" style=\"font-weight:bold;\">hello world</h1>\n\n------\n\n​\t这是以字2021年搭建个人博客的第一篇文章，目的有二：一来纪念下个人博客的搭建，虽然是简易版的，但也是在自己碌碌无为的这一段时间里的一个肉眼可见的小进步吧；二来测试一下使用typora进行markdown编写是否成功以及方便，同时练习一下基本的博客上传的方式，以便在后期能够快速、漂亮的上传自己的博客。\n\n<!--more-->\n\n后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。后面的文字是用来测试是否能够自动形成摘录。\n\n"},{"title":"Hello World","url":"/posts/1243066710/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]